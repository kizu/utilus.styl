// Simple shortcut to check if the argument is an array
is_array()
  return length(arguments) > 1


// Simple shortcut to check if the argument is a hash
is_hash()
  return (arguments[0][1] or arguments[0][1] == "0") ? true : false


// Simple shortcut to check if the arguments are separated by comma
is_comma_list()
  return false unless is_array(arguments)

  for $item, $index in arguments
    if $index == 0
      $test = $item
    else
      $test = $test, $item
  return s('%s',arguments) == s('%s',$test)


// Stylus don't allow us to reassign global variables in functions, so I made this:
//   `reassign($foo,"new")` is like `$foo = "new"`, but now works in functions, yays!
// However, you need to use this variable like `clone($var)`, or it would get the ressigned value everywhere
reassign($where, $what)
  $where[0] = '' // So if there is a multidimensional array, the pop would pop the appropriate item at last
  for i in $where
    $void = pop($where)
  push($where,$what)


// Proxy for throwing arguments into some function
proxy(func, args...)
  // If we get a single nested array, make it not nested
  if length(args) == 1
    args = args[0]

  if length(args) == 1
    func(args2)
  else if length(args) == 2
    func(args[0],args[1])
  else if length(args) == 3
    func(args[0],args[1],args[2])
  else if length(args) == 4
    func(args[0],args[1],args[2],args[3])
  else if length(args) == 5
    func(args[0],args[1],args[2],args[3],args[4])
  else if length(args) == 6
    func(args[0],args[1],args[2],args[3],args[4],args[5])
  else if length(args) == 7
    func(args[0],args[1],args[2],args[3],args[4],args[5],args[6])


// Proper append the given array with given item
append($first, $second, $use_comma = auto)
  $result = $first

  if length($first) == 0
    push($result, $second)
  else
    if $use_comma != false
      if is_comma_list($first) or (!is_array($second) and $use_comma != true)
        push($result, $second)
      else
        $result = $first, $second
        $result[0] = $first
        $result[1] = $second
    else
      if is_comma_list($first)
        push($result[length($result) - 1], $second)
      else
        push($result, $second)

  return $result


// Prepend the given array with given value
prepend($where, $what, $use_comma = auto)
  $result = $what
  if is_comma_list($where)
    for $item, $index in $where
      if $index == 0 and $use_comma == false
        $result = $result $item
      else
        $result = $result, $item
  else
    for $item, $index in $where
      if $index == 0 and $use_comma == true
        $result = $result, $item
      else
        $result = $result $item
  return $result


// Remove the first item, return the original array.
remove_first($where)
  $result = unquote('')
  if is_comma_list($where)
    for $item, $index in $where
      if $index == 1
        $result = $item
      else if $index > 1
        $result = $result, $item
  else
    for $item, $index in $where
      push($result, $item) if $index > 0
  return $result


// Do some func on every item of the given argument (second)
mass(func, args...)
  what = args[0]
  if !is_array(what)
    what = proxy(func, args)
  else
    for w,i in what
      newargs = arguments
      newargs[1] = w
      what[i] = proxy(mass, newargs)
  return what


// Returns first defined variable or entity, false otherwise
//   predefined arguments are needed so the function would
//   return an array if it's the only argument
or($arg1, $arg2 = false, args...)
  for $arg in arguments
    return $arg if $arg != false and (typeof($arg) != 'ident' or is_array($arg) or $arg == 0)
  return false


// Flatten nested arrays to a flat one-level array
// Use as
//   a: flatten(1..5, 7..10, 14..15, 17..18)
//   a: flatten(1..5 7..10 14..15 17..18)

flatten()
  result = ()

  compute()
    for arg in arguments
      if length(arg) > 1
        compute(arg)
      else
        push(result, arg)

  compute(arguments)
  return result


// Hash getter with possible fallback.
// Returns `false` if nothing found, or no `fallback` given
get($hash, $key = false, $fallback = false)
  $result = false
  if is_array($hash) and $key
    if is_comma_list($hash)
      for $pair in $hash
        if $result == false and type($result) == 'boolean'
          $result = $pair[1..length($pair)] if $pair[0] == $key
    else
      $result = $hash[1..length($hash)] if $hash[0] == $key

  if $result == null
    $result = true
  if $result == false and type($result) == 'boolean'
    $result = $fallback

  return $result
  // What if hash contains multiple items with the same key?


// Getter of an argument at the given index
//   Should it be merged with either simple `get` or `or`?
get_n($where, $fallback = false, $index = 0, $type = 'any')
  $i = 0
  for $arg in $where
    if $type == 'any' or $type == type($arg)
      if $i == $index
        return $arg
      else
        $i = $i + 1
  return $fallback

get_string($where, $fallback = false, $index = 0)
  get_n($where, $fallback, $index, 'string')

get_ident($where, $fallback = false, $index = 0)
  get_n($where, $fallback, $index, 'ident')

get_unit($where, $fallback = false, $index = 0)
  get_n($where, $fallback, $index, 'unit')

get_color($where, $fallback = false, $index = 0)
  get_n($where, $fallback, $index, 'rgba')

// Get the item from arguments with the same type of the given fallback
alike($where, $fallback, $index = 0)
  get_n($where, $fallback, $index, type($fallback))

// Retrieve one of the given items with optional fallback
retrieve($where, $what, $fallback = false)
  if is_array($what)
    for $what_item in $what
      if $what_item in $where
        return $what_item
  else
    if $what in $where
      return $what
  return $fallback

// Count the arguments by the given type
count($where, $what = 'unit')
  $count = 0
  for $item in $where
    if type($item) == $what
      $count = $count + 1
  return $count

// retrieve the sides array, like in paddings, margins, borders etc.
get_sides($where, $fallback = 0)
  // Could be refactored to have only one for running
  $top = alike($where, $fallback)
  $right = alike($where, $top, 1)
  $bottom = alike($where, $top, 2)
  $left = alike($where, $right, 3)

  // Could use `auto` from arguments instead of using `trbl` keywords
  $top = auto if bottom in $where
  $right = auto if left in $where
  $bottom = auto if top in $where
  $left = auto if right in $where

  return $top $right $bottom $left


/* Color functions
========================================*/

// Transparentify a color
// Inspiration: https://github.com/LearnBoost/stylus/issues/313
// Use as
//   color: rgb2rgba(#CC6699)
rgb2rgba(color, underlay = #FFF)
  r1 = red(color)
  g1 = green(color)
  b1 = blue(color)

  r2 = red(underlay)
  g2 = green(underlay)
  b2 = blue(underlay)

  a1 = a2 = a3 = abs(r1 - r2) / 255 if r1 != r2

  a1 = abs(r1 - r2) / (255 - r2) if not r2 in (r1 255)
  a2 = abs(g1 - g2) / (255 - g2) if not g2 in (g1 255)
  a3 = abs(b1 - b2) / (255 - b2) if not b2 in (b1 255)

  a = min(a1,min(a2,a3))

  r = r2 + (r1 - r2) / floor(a, 2)
  g = g2 + (g1 - g2) / floor(a, 2)
  b = b2 + (b1 - b2) / floor(a, 2)

  a = round(a, 2)

  return rgba(r,g,b,a)

// Alias
transparentify = rgb2rgba


// Getting luminance of a color,
//   got from https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js#L55
luminance($color)
  f($c)
    $c = $c / 255
    return ($c < 0.03928) ? ($c / 12.92) : (($c + 0.055) / 1.055) ** 2.4;
  return 0.2126 * f(red($color)) + 0.7152 * f(green($color)) + 0.0722 * f(blue($color));


// Get just the average color from the given colors.
average_color()
  $l = length(arguments)
  $r = 0
  $g = 0
  $b = 0
  $a = 0

  for $color in arguments
    $r = $r + red($color)
    $g = $g + green($color)
    $b = $b + blue($color)
    $a = $a + alpha($color)

  $r = $r / $l
  $g = $g / $l
  $b = $b / $l
  $a = $a / $l

  return rgba($r,$g,$b,$a)


// Basic color blending
blend($top,$bottom = #FFF)
  // Only normal blending here for now
  return $top if alpha($top) == 1
  return $bottom if alpha($top) == 0

  newR = (1 - alpha($top)) *   red($bottom) + alpha($top) *   red($top)
  newG = (1 - alpha($top)) * green($bottom) + alpha($top) * green($top)
  newB = (1 - alpha($top)) *  blue($bottom) + alpha($top) *  blue($top)
  newA = 1 // FIXME: should be smth different if the alpha of $bottom != 1

  return rgba(newR,newG,newB,newA)


// Determining contrast ratio,
//   based on https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js#L108
//       .. 3   == bad for any text
//   3   .. 4.5 == bad for small text
//   4.5 .. 7   == perfect for big text
//   7   ..     == perfect for any size
contrast($top,$bottom = #FFF)
  if alpha($bottom) >= 1
    $l1 = luminance($bottom) + .05
    $l2 = luminance( alpha($top) < 1 ? blend($top,$bottom) : $top ) + .05
    $ratio = $l1 / $l2
    if $l2 > $l1
      $ratio = 1 / $ratio
    return round($ratio,1)
  else
    // FIXME: some minor difference there with http://leaverou.github.com/contrast-ratio/
    $closest = \
      rgb(min(max(0, (red($top)   - red($bottom)   * alpha($bottom)) / (1 - alpha($bottom))),255), \
          min(max(0, (green($top) - green($bottom) * alpha($bottom)) / (1 - alpha($bottom))),255), \
          min(max(0, (blue($top)  - blue($bottom)  * alpha($bottom)) / (1 - alpha($bottom))),255))
    $max = max(contrast($top,blend($bottom,#FFF)),contrast($top,blend($bottom,#000)))
    $min = contrast($top,$closest)
    return (round(($min + $max) / 2, 2) $min $max)

